#+title: ROOT-mode User Manual
#+author: Jay Morgan
#+date: <2022-04-20 mer.>
#+html_head: <link rel="stylesheet" type="text/css" href="stylesheet.css"/>

* Introduction

This is the user-manual for the ROOT-mode package, the source code of which can be
found at [[https://github.com/jaypmorgan/root-mode]]. In this manual, I detail how to
install, use, customise, and help develop ROOT-mode.

ROOT-mode is an Emacs major-mode for interacting with ROOT
(https://root.cern/). Specifically, this package provides the facilities to run the
ROOT command line interface/REPL.

** What is ROOT?

#+begin_quote
ROOT enables statistically sound scientific analyses and visualization of large
amounts of data: today, more than 1 exabyte (1,000,000,000 gigabyte) are stored in
ROOT files. The Higgs was found with ROOT!
#+end_quote

** What is ROOT-mode?

ROOT-mode is a major-mode in Emacs that provides the functionality to easily interact
with the ROOT REPL. In this, we have provided various functions such as: creating a
new REPL, sending lines/function definitions/evaluating files in this REPL. In
addition to working with C++ files. This functionality is extended to org-mode. In
this way, we may create C++ source code blocks and evaluate their contents, once
again, using the ROOT REPL.

#+CAPTION: A brief example of what we want ROOT-mode to do: that is evaluate C++ statements in the ROOT REPL, quickly and easily.
[[./images/brief-example.gif]]

* Installation

#+begin_verse
I am in the process of submitting the package to MELPA, but in the meantime, we will have to rely on the manual installation or specify the github repository via straight.
#+end_verse

There are many competing ways to install packages with Emacs. Instead of enumerating
all of them, I will demonstrate how to install ROOT-mode using to ends of the
spectrum. The first will be installing ROOT-mode using a manual installation and will
not require any other 3rd-party tools. The second way, that may be more common if you
frequently customise your Emacs environment, will be to use =use-package= and
=straight.el= to create a very concise configuration.

** Manual installation

First you will need to clone the repository from Github:

#+begin_src bash
git clone https://github.com/jaypmorgan/root-mode ~/.emacs.d/root-mode
#+end_src

After, in Emacs, you can load the package. First we're adding this cloned directory
to the load-path. This will ensure that when we call =(load "root")=, Emacs will be
able to find a =root.el=. After, we call =(require 'root-mode)= which will allow us to
begin using the package straight away. 

#+name: require-package
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/root-mode/")
(load "root")
(require 'root-mode)
#+end_src

If you want to configure some of the variables, these can be done using =setq=. One
variable that you might want to customise is the =root-filepath=. This variable is the
path (absolute or relative) to the ROOT REPL executable.

#+name: variables
#+begin_src emacs-lisp
(setq root-filepath "/path/to/root"
      root-terminal-backend 'vterm)
#+end_src

You may also want to configure some key-bindings to the commonly used functions. I
would suggest that these key-bindings are only created within the C++ keymap.

#+name: keybind
#+begin_src emacs-lisp
(define-key 'c++-mode-map (kbd "C-c C-c") 'root-eval-defun-maybe)
(define-key 'c++-mode-map (kbd "C-c C-b") 'root-eval-buffer)
(define-key 'c++-mode-map (kbd "C-c C-l") 'root-eval-file)
#+end_src

In summary we would have the following configuration:

#+begin_src emacs-lisp :noweb yes
<<require-package>>
<<variables>>
<<keybind>>
#+end_src

** Using =use-package= and =straight.el=

The package is not on MELPA, so you can either clone the repository
and manually load the file in Emacs, or use something like
use-package/straight. Here is one example of installing/configuring
the package with straight.el:

#+begin_src emacs-lisp
(use-package root-mode
  :bind (:map c++-mode-map
	     (("C-c C-c" . root-eval-defun)
	      ("C-c C-b" . root-eval-buffer)
	      ("C-c C-l" . root-eval-file)
	      ("C-c C-r" . root-eval-region)))
  :straight (root-mode :type git :host github :repo "jaypmorgan/root-mode")
  :config
  (setq root-filepath "/path/to/root"))
#+end_src


* Using root-mode

When in a C++ major-mode buffer, enter the command (using =M-x=): =run-root=. This will
start a new instance of the ROOT REPL in the same window.

If you want to create a new window for the ROOT REPL, instead of using =run-root=,
enter the command: =run-root-other-window=. This will first split the window sensibly,
then create a new ROOT REPL in the other window.

* Customisation

There are only a few variables provided by the package:

- *root-filepath* -- (string, default ="root"=) this is the
  absolute/relative path to the root executable. This could be left as
  the default "root" value if ROOT is available on your $PATH.
- *root-command-option* -- (string, default =""=) these are the
  command line options used when starting ROOT. By default there are
  no options.
- *root-prompt-regex* -- (string, default ="^\\[[0-9;^k]+m?"=) this
  is the regular expression used to find the input prompt of the ROOT
  REPL. If there is a customised prompt, this will need to be updated
  to suit the customisation.
- *root-buffer-name* -- (string, default ="*ROOT*"=) what to call
  the ROOT repl buffer when it starts. This could be left as the
  default =*ROOT*=, but its there for you to modify as you please.
- *root-terminal-backend* -- (symbol, default ='terminal=) the
  terminal emulator to run the ROOT instance in. There are only two
  current defined [=vterm=, =inferior=]. By default, the terminal
  backend is set to =inferior=. Though, there is still some issues in
  getting the auto-complete to work correctly. If you really need
  auto-complete, I would recommend switching the backend to ='vterm=
  (requires you've already installed vterm).


* Developing ROOT-mode

#+begin_src emacs-lisp

#+end_src

** Variable index
** Function index

Below is listed the various commands provided by the package.

| Command                         | Description                                                                                                        |
|---------------------------------+--------------------------------------------------------------------------------------------------------------------|
| =run-root=                      | Start the ROOT REPL in the same window.                                                                            |
| =run-root-other-window=         | Start the ROOT REPL in a different window.                                                                         |
| =root-switch-to-repl=           | Move the cursor to the ROOT REPL.                                                                                  |
| =root-eval-region=              | Evaluate a marked region in ROOT.                                                                                  |
| =root-eval-line=                | Evaluate this line in the REPL.                                                                                    |
| =root-eval-defun=               | Evaluate the current function in ROOT (current as defined by cursor position).                                     |
| =root-eval-defun-maybe=         | If the cursor is within a function declaration, then evaluate this function, else we'll evaluate this single line. |
| =root-eval-buffer=              | Evaluate the current buffer in ROOT.                                                                               |
| =root-eval-file=                | Evaluate a file (using the '.L' syntax), prompt for a file.                                                        |
| =root-change-working-directory= | Change the working directory of the root session, prompt for a directory.                                          |
| =root-list-input-history=       | List the previously input statements and for selection.                                                            |
|                                 |                                                                                                                    |

** Testing


To test the functionality of the package, some unit tests have been
stored in the =tests/= directory. To run these unit tests, you can
either evaluate the specific buffer in Emacs and run =ert= (see
<https://www.gnu.org/software/emacs/manual/html_node/ert/Running-Tests-Interactively.html>
for more information), or you can them all from the command line
using:

#+begin_src bash
emacs -batch \
	-l ert \
	-l root.el \
	-l tests/test-root.el \
	-f ert-run-tests-batch-and-exit
#+END_SRC


** Contributions

* Contact
